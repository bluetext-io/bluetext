#!/usr/bin/env bash
# Add the couchbase-client library as an editable dependency

set -e

# Change to the api directory
cd "$(dirname "$0")/.."

# Detect OS for sed compatibility
if [[ "$OSTYPE" == "darwin"* ]]; then
    SED_INPLACE=(sed -i '')
else
    SED_INPLACE=(sed -i)
fi

echo "📦 Adding couchbase-client library as editable dependency..."

$(dirname "$0")/uv add --editable ../lib/py/couchbase-client

# config with env vars
# init and deinit client

echo "✅ Couchbase client library added successfully!"

# Add Couchbase environment variables to polytope.yml if they don't exist
echo ""
echo "📝 Adding Couchbase environment variables to polytope.yml..."

# Check if COUCHBASE_HOST already exists in the env section
if ! grep -q "COUCHBASE_HOST" polytope.yml; then
    # Find the line with "env:" and add Couchbase env vars after the last env var
    # Insert after TEMPORAL_TASK_QUEUE or last env var
    if grep -q "TEMPORAL_TASK_QUEUE" polytope.yml; then
        "${SED_INPLACE[@]}" "/TEMPORAL_TASK_QUEUE/a\\
\\
            - { name: COUCHBASE_HOST, value: couchbase }\\
            - { name: COUCHBASE_USERNAME, value: user }\\
            - { name: COUCHBASE_PASSWORD, value: password }\\
            - { name: COUCHBASE_BUCKET, value: default }\\
            - { name: COUCHBASE_PROTOCOL, value: couchbase }
" polytope.yml
    else
        # If TEMPORAL_TASK_QUEUE doesn't exist, add after LOG_LEVEL or another env var
        "${SED_INPLACE[@]}" "/LOG_LEVEL/a\\
\\
            - { name: COUCHBASE_HOST, value: couchbase }\\
            - { name: COUCHBASE_USERNAME, value: user }\\
            - { name: COUCHBASE_PASSWORD, value: password }\\
            - { name: COUCHBASE_BUCKET, value: default }\\
            - { name: COUCHBASE_PROTOCOL, value: couchbase }
" polytope.yml
    fi
    echo "✅ Added Couchbase environment variables to polytope.yml"
else
    echo "ℹ️  Couchbase environment variables already exist in polytope.yml"
fi

# Add the add-couchbase-collection tool to polytope.yml if it doesn't already exist
if ! grep -q "{{ project-name }}-add-couchbase-collection:" polytope.yml; then
    echo ""
    echo "📝 Adding add-couchbase-collection tool to polytope.yml..."
    
    cat >> polytope.yml << 'EOF'

  {{ project-name }}-add-couchbase-collection:
    info: Scaffold a new Python script and add it to pyproject.toml. Run this to create test scripts for your agents!
    params:
      - id: name
        info: Scaffolds a new Couchbase collection with CRUD operations, Pydantic models, and automatic integration.
        type: str
    run:
      - tool: {{ project-name }}
        args:
          id: {{ project-name }}-add-couchbase-collection
          restart-policy: never
          cmd: ./bin/add-couchbase-collection {pt.param name}
          create: always
EOF
    
    echo "✅ Added add-couchbase-collection tool to polytope.yml"
fi

# Create the Couchbase configuration file
echo ""
echo "📝 Creating Couchbase configuration file..."

# Create the couchbase.py configuration file
cat > src/backend/conf/couchbase.py << 'EOF'
from pydantic import BaseModel

from ..utils import auth, env, log
from ..utils.env import EnvVarSpec

from couchbase_client import CouchbaseConf

#### Env Vars ####

COUCHBASE_HOST = EnvVarSpec(
    id="COUCHBASE_HOST",
    default="couchbase"
)

COUCHBASE_USERNAME = EnvVarSpec(
    id="COUCHBASE_USERNAME",
    default="user"
)

COUCHBASE_PASSWORD = EnvVarSpec(
    id="COUCHBASE_PASSWORD",
    default="password",
    is_secret=True
)

COUCHBASE_BUCKET = EnvVarSpec(
    id="COUCHBASE_BUCKET",
    default="main"
)

COUCHBASE_PROTOCOL = EnvVarSpec(
    id="COUCHBASE_PROTOCOL",
    default="couchbase"
)

VALIDATED_ENV_VARS = [
    COUCHBASE_HOST,
    COUCHBASE_USERNAME,
    COUCHBASE_PASSWORD,
    COUCHBASE_BUCKET,
    COUCHBASE_PROTOCOL
]


#### Getters ####

def get_couchbase_conf():
    """Get Couchbase connection configuration."""
    return CouchbaseConf(
        host=env.parse(COUCHBASE_HOST),
        username=env.parse(COUCHBASE_USERNAME),
        password=env.parse(COUCHBASE_PASSWORD),
        bucket=env.parse(COUCHBASE_BUCKET),
        protocol=env.parse(COUCHBASE_PROTOCOL),
    )
EOF

echo "✅ Created src/backend/conf/couchbase.py"

# Create the init/couchbase.py file with initialization logic
echo ""
echo "📝 Creating init/couchbase.py with initialization logic..."

cat > src/backend/init/couchbase.py << 'EOF'
"""Couchbase client initialization and deinitialization."""

from fastapi import FastAPI

from couchbase_client import CouchbaseClient
from ..conf.couchbase import get_couchbase_conf
from ..couchbase.collections import COLLECTIONS
from ..utils.log import get_logger

logger = get_logger(__name__)


async def init_couchbase(app: FastAPI) -> None:
    """Initialize Couchbase client and collections."""
    logger.info("Initializing Couchbase client...")
    couchbase_config = get_couchbase_conf()
    app.state.couchbase_client = CouchbaseClient(couchbase_config)
    await app.state.couchbase_client.init_connection()
    logger.info("Couchbase client connected successfully")

    if not COLLECTIONS:
        logger.info("No Couchbase collections found. You can add collections using the add-couchbase-collection tool.")
    else:
        logger.info(f"Initializing {len(COLLECTIONS)} Couchbase collection(s)...")
        for Collection in COLLECTIONS:
            await Collection(app.state.couchbase_client).initialize()
        logger.info(f"All {len(COLLECTIONS)} Couchbase collection(s) initialized successfully")


async def deinit_couchbase(app: FastAPI) -> None:
    """Close Couchbase client connection."""
    logger.info("Closing Couchbase client connection...")
    await app.state.couchbase_client.close()
    logger.info("Couchbase client connection closed")
EOF

echo "✅ Created src/backend/init/couchbase.py"

# Inject Couchbase initialization calls into init/__init__.py
echo ""
echo "📝 Injecting Couchbase initialization calls into init/__init__.py..."

# Check if couchbase initialization is already present
if grep -q "init_couchbase" src/backend/init/__init__.py; then
    echo "ℹ️  Couchbase initialization already present in init/__init__.py"
else
    # Add import at the top of the file (after FastAPI import)
    "${SED_INPLACE[@]}" '/^from fastapi import FastAPI$/a\
\
from .couchbase import init_couchbase, deinit_couchbase
' src/backend/init/__init__.py

    # Inject init call - insert after docstring line (single or multi-line)
    "${SED_INPLACE[@]}" '/async def init(app: FastAPI) -> None:/,/^async def deinit/{
        /""".*"""/{
            a\
    await init_couchbase(app)
        }
    }' src/backend/init/__init__.py

    # Inject deinit call - insert after docstring line (single or multi-line)
    "${SED_INPLACE[@]}" '/async def deinit(app: FastAPI) -> None:/,${
        /""".*"""/{
            a\
    await deinit_couchbase(app)
        }
    }' src/backend/init/__init__.py

    echo "✅ Injected Couchbase initialization calls into init/__init__.py"
fi

# Update the main conf/__init__.py file to import couchbase configuration
echo ""
echo "📝 Updating src/backend/conf/__init__.py to include Couchbase configuration..."

# Add import at the top of the file (after the existing imports)
if ! grep -q "from . import couchbase" src/backend/conf/__init__.py; then
    # Add the import after the line with "from ..utils.env import EnvVarSpec"
    "${SED_INPLACE[@]}" '/from \.\.utils\.env import EnvVarSpec/a\
from . import couchbase
' src/backend/conf/__init__.py
    echo "✅ Added couchbase import to conf/__init__.py"
else
    echo "ℹ️  Couchbase import already exists in conf/__init__.py"
fi

# Add VALIDATED_ENV_VARS.extend(couchbase.VALIDATED_ENV_VARS) after the initial VALIDATED_ENV_VARS definition
if ! grep -q "VALIDATED_ENV_VARS.extend(couchbase.VALIDATED_ENV_VARS)" src/backend/conf/__init__.py; then
    # Find the closing bracket of VALIDATED_ENV_VARS and add the extend statement after it
    "${SED_INPLACE[@]}" '/^VALIDATED_ENV_VARS = \[/,/^\]/{
        /^\]/a\
\
VALIDATED_ENV_VARS.extend(couchbase.VALIDATED_ENV_VARS)
    }' src/backend/conf/__init__.py
    echo "✅ Added VALIDATED_ENV_VARS.extend(couchbase.VALIDATED_ENV_VARS) to conf/__init__.py"
else
    echo "ℹ️  VALIDATED_ENV_VARS extension already exists in conf/__init__.py"
fi

# Create the couchbase/collections directory if it doesn't exist
mkdir -p src/backend/couchbase/collections

# Create the __init__.py file for the couchbase module if it doesn't exist
if [ ! -f src/backend/couchbase/__init__.py ]; then
    touch src/backend/couchbase/__init__.py
    echo "✅ Created src/backend/couchbase/__init__.py"
fi

# Create the __init__.py file for the collections module if it doesn't exist
if [ ! -f src/backend/couchbase/collections/__init__.py ]; then
    echo ""
    echo "📝 Creating collections registry..."
    cat > src/backend/couchbase/collections/__init__.py << 'EOF'
"""
Couchbase collections registry.

All collections are automatically registered here.
"""

# Import collections here
# Example:
# from .users import UserCollection

# Registry of all collections
COLLECTIONS = [
    # Add collection classes here
    # Example: UserCollection
]
EOF
    echo "✅ Created src/backend/couchbase/collections/__init__.py"
fi

echo ""
echo "✅ Couchbase client setup complete!"
echo ""
echo "You can now:"
echo "  1. Import and use the Couchbase client in your code:"
echo "     from couchbase_client import CouchbaseClient"
echo "  2. Initialization is handled automatically in src/backend/init/couchbase.py"
echo "  3. Call `__polytope__run(tool: {{ project-name }}-add-couchbase-collection, name: placeholder)` to add couchbase collections."
