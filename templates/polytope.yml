tools:
  add-frontend:
    info: |
      Creates and starts a frontend boilerplate subproject at the supplied path.
      Always use this when creating a new frontend project.
      The project uses bun+shadcn+react-router v7.
      Runs in a container running the subproject handled by Polytope.
      The environment is set to dev and hot reload is enabled.
      Defines an additional module for dependency management in the subprojects polytope.yml file.
    await: [scaffold-frontend]
    params:
      - id: service-name
        info: Name of the service to create and run at <project-root>/modules/<service-name>.
        type: [default, str, frontend]
    run:
      - id: scaffold-frontend
        module: polytope/scaffold
        args:
          actions:
            - template: {type: repo, repo: "#pt-clj pt/module-repo-ref", path: frontend}
              path: modules/{pt.param service-name}
              add-to-tools: [{tool: default, call: frontend}]
      - id: frontend
        after: {step: scaffold-frontend}
        code: |-
          #pt-clj
          (-> (clojure.string/replace (:service-name params) #"[^A-Za-z0-9-]*$" "")
              (clojure.string/replace  #".*/" "")
              (pt/call-module {}))
  add-api:
    info: |
      Creates and starts an API boilerplate subproject.
      Always use this when creating a new API service.
      The project uses uv+FastAPI+SQLModel and has configuration options for Postgres, Couchbase and Temporal.
      Runs in a container handled by Polytope running the subproject.
      The environment is set to dev and hot reload is enabled.
      Defines an additional module for dependency management in the subprojects polytope.yml file.
    await: [scaffold-api]
    params:
      - id: service-name
        info: Name of the service to create and run at <project-root>/modules/<service-name>.
        type: [default, str, api]
    run:
      - id: scaffold-api
        module: polytope/scaffold
        args:
          actions:
            - template: {type: repo, repo: "#pt-clj pt/module-repo-ref", path: api}
              path: modules/{pt.param service-name}
              add-to-tools: [{tool: default, call: api}]
      - id: api
        after: {step: scaffold-api}
        code: |-
          #pt-clj
          (-> (clojure.string/replace (:service-name params) #"[^A-Za-z0-9-]*$" "")
              (clojure.string/replace  #".*/" "")
              (pt/call-module {}))
  add-postgres:
    info: |
      Creates and starts a Postgres subproject under <project-root>/modules/postgres.
      Runs a Postgres server in a container handled by Polytope.
      The environment is set to run in a basic dev mode with no auth, etc.
    await: [scaffold-postgres]
    run:
      - id: scaffold-postgres
        module: polytope/scaffold
        args:
          actions:
            - template: {type: repo, repo: "#pt-clj pt/module-repo-ref", path: postgres}
              path: modules/postgres
              on-conflict: skip
              add-to-tools: [{tool: default, call: postgres}]
      - id: postgres
        after: {step: scaffold-postgres}
        code: '#pt-clj (pt/call-module "postgres" {})'

  add-couchbase:
    info: |
      Creates and starts a Couchbase subproject under <project-root>/modules/couchbase.
      Runs a Couchbase server in a container handled by Polytope.
      Associated configuration files can be found at modules/config-manager/conf/.
      The environment is set to run in a basic dev mode with no auth, etc.
    await: [scaffold-couchbase, scaffold-config-manager]
    run:
      - id: scaffold-couchbase
        module: polytope/scaffold
        args:
          actions:
            - template: {type: repo, repo: "#pt-clj pt/module-repo-ref", path: config-manager}
              path: modules/config-manager
              on-conflict: skip
              add-to-tools: [{tool: default, call: config-manager}]
            - template: {type: repo, repo: "#pt-clj pt/module-repo-ref", path: couchbase}
              path: modules/couchbase
              on-conflict: skip
              add-to-tools: [{tool: default, call: couchbase}]
      - id: config-manager
        after: {step: scaffold-couchbase}
        code: '#pt-clj (pt/call-module "config-manager" {})'
      - id: couchbase
        after: {step: scaffold-couchbase}
        code: '#pt-clj (pt/call-module "couchbase" {})'

  add-temporal:
    info: |
      Creates and starts a
        - Temporal subproject under <project-root>/modules/temporal.
        - Postgres subproject under <project-root>/modules/postgres if not already present.
        - Temporal UI subproject under <project-root>/modules/temporal-ui.
      Everything runs in containers handled by Polytope.
      The environment is set to run in a basic dev mode with no auth, etc.
    await: [scaffold-postgres, scaffold-temporal]
    run:
      - id: scaffold-temporal
        module: polytope/scaffold
        args:
          actions:
            - template: {type: repo, repo: "#pt-clj pt/module-repo-ref", path: temporal}
              path: modules/temporal
              on-conflict: skip
              add-to-tools:
                - {tool: default, call: temporal}
                - {tool: default, call: temporal-ui}
            - template: {type: repo, repo: "#pt-clj pt/module-repo-ref", path: postgres}
              path: modules/postgres
              on-conflict: skip
              add-to-tools: [{tool: default, call: postgres}]
      - id: postgres
        after: {step: scaffold-temporal}
        code: '#pt-clj (pt/call-module "postgres" {})'
      - id: temporal
        after: {step: scaffold-temporal}
        code: '#pt-clj (pt/call-module "temporal" {})'
      - id: temporal-ui
        after: {step: scaffold-temporal}
        code: '#pt-clj (pt/call-module "temporal-ui" {})'
